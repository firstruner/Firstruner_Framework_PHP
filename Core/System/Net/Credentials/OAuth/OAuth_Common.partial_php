<?php

/**
 * Copyright since 2024 Firstruner and Contributors
 * Firstruner is an Registered Trademark & Property of Christophe BOULAS
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Freemium License
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to contact@firstruner.fr so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit, reproduce ou modify this file.
 * Please refer to https://firstruner.fr/ or contact Firstruner for more information.
 *
 * @author    Firstruner and Contributors <contact@firstruner.fr>
 * @copyright Since 2024 Firstruner and Contributors
 * @license   Proprietary
 * @version 2.0.0
 */

namespace System\Net\Credentials;

use System\Attributes\Partial;
use System\Net\Headers_Code;
use System\Net\Keys\AppKeys;
use System\Net\Keys\CookieKeys;
use DateTimeZone;
use System\Default\_string;


#[Partial()]
class OAuth implements IOAuth
{
    // Static
    private static $maxDelayTimestamp = 3600; // 1h
    private static $maxDelayTimestamp_renew = 4; // 4h

    // Instanciation
    protected string $access_token;
    protected string $renew_token;
    protected \DateTime $token_expiration;
    protected \DateTime $renew_token_expiration;
    protected $token_type;
    protected \DateTime $connectionStamp;
    protected string $TokenCookie;
    protected $parameters;
    protected $status;

    private function extract_props($object)
    {
        $public = [];

        $reflection = new \ReflectionClass(get_class($object));

        foreach ($reflection->getProperties() as $property) {
            $property->setAccessible(true);

            $value = $property->getValue($object);
            $name = $property->getName();

            if (is_array($value)) {
                $public[$name] = [];

                foreach ($value as $item) {
                    if (is_object($item)) {
                        $itemArray = $this->extract_props($item);
                        $public[$name][] = $itemArray;
                    } else {
                        $public[$name][] = $item;
                    }
                }
            } else if (is_object($value)) {
                $public[$name] = $this->extract_props($value);
            } else $public[$name] = $value;
        }

        return $public;
    }

    public function __destruct()
    {
        $access_token = null;
        $renew_token = null;
        $parameters = null;
        $token_expiration = null;
        $renew_token_expiration = null;
        $connectionStamp = null;
    }

    public function __construct()
    {
        $this->status = $this->_getStatus(Headers_Code::Unauthorized_Code);
        $this->token_expiration = (
            new \DateTime())->modify(
            '+0 seconds'
        );
        $this->renew_token_expiration = (
            new \DateTime())->modify(
            '+0 seconds'
        );

        $arguments = func_get_args();
        $numberOfArguments = func_num_args();

        if (method_exists($this, $function = '__construct' . $numberOfArguments)) {
            call_user_func_array(array($this, $function), $arguments);
        }
    }

    public function __construct1($jsonString)
    {
        $json = json_decode($jsonString);

        $this->access_token = $json->Tokens->access_token->token;
        $this->token_expiration = (new \DateTime())->modify('+' . $json->Tokens->access_token->expireIn . ' seconds');

        $this->renew_token = $json->Tokens->renew_token->token;
        $this->renew_token_expiration = (new \DateTime())->modify('+' . $json->Tokens->renew_token->expireIn . ' seconds');

        $this->token_type = OAuthType::GetEnum($json->Tokens->Type->Code);
        $this->connectionStamp = new \DateTime(
            $json->Connection->TimeStamp->date,
            new DateTimeZone(
                $json->Connection->TimeStamp->timezone
            )
        );
        $this->TokenCookie = $json->Connection->CookieGuid;
        $this->status = $this->_getStatus($json->Connection->Status->code);
        $this->parameters = $json->Parameters;
    }

    public function __construct2($_params, $_statusCode)
    {
        call_user_func_array(array($this, '__construct3'), array($_params, $_statusCode));
        //__construct3($_params, $_statusCode);
    }

    public function __construct3($_params, $_statusCode, $_type = OAuthType::Undefined)
    {
        $this->access_token = OAuth::GetNewToken();
        $this->token_expiration = (
            new \DateTime())->modify(
            '+' . strval(
                ($_statusCode != Headers_Code::Success_Code ? 0 : OAuth::$maxDelayTimestamp)
            )
                . ' seconds'
        );

        $this->renew_token = OAuth::GetNewToken();
        $this->renew_token_expiration = (
            new \DateTime())->modify(
            '+' . strval(
                ($_statusCode != Headers_Code::Success_Code ? 0 : OAuth::$maxDelayTimestamp_renew)
            )
                . ' hours'
        );

        $this->token_type = $_type;
        $this->parameters = $_params;
        $this->TokenCookie = isset($_COOKIE[CookieKeys::JSessionName])
            ? $_COOKIE[CookieKeys::JSessionName]
            : "";
        $this->connectionStamp = new \DateTime();
        $this->status = $this->_getStatus($_statusCode);
    }

    public function GetStatus()
    {
        return $this->status;
    }

    private function _getStatus($statusCode)
    {
        return array(
            "code" => $statusCode,
            "text" => (($statusCode == Headers_Code::Success_Code) ? OAuthType::Text_Connected : OAuthType::Text_Disconnected)
        );
    }

    public function checkToken($value)
    {
        return ($this->access_token == $value)
            && (($this->token_expiration->getTimestamp() - ((new \DateTime())->getTimestamp())) > 0);
    }

    public function renewToken($value)
    {
        $_statusCode = (($this->renew_token == $value)
            && (($this->renew_token_expiration->getTimestamp() - ((new \DateTime())->getTimestamp())) > 0))
            ? Headers_Code::Success_Code
            : Headers_Code::Unauthorized_Code;

        $this->access_token = OAuth::GetNewToken();
        $this->token_expiration = (
            new \DateTime())->modify(
            '+' . strval(
                ($_statusCode != Headers_Code::Success_Code ? 0 : OAuth::$maxDelayTimestamp)
            )
                . ' seconds'
        );

        $this->renew_token = OAuth::GetNewToken();
        $this->renew_token_expiration = (
            new \DateTime())->modify(
            '+' . strval(
                ($_statusCode != Headers_Code::Success_Code ? 0 : OAuth::$maxDelayTimestamp_renew)
            )
                . ' hours'
        );

        return ($_statusCode == Headers_Code::Success_Code);
    }

    public function timeConnected()
    {
        $this->connectionStamp->getTimestamp() - (new \DateTime())->getTimestamp();
    }

    public function getParameters()
    {
        return $this->parameters;
    }

    public function generateJSon($datasAppended = _string::EmptyString)
    {
        return json_encode(
            array(
                "Tokens" => array(
                    "access_token" => array(
                        "token" => $this->access_token,
                        "expireIn" => $this->token_expiration->getTimestamp() - ((new \DateTime())->getTimestamp())
                    ),
                    "renew_token" => array(
                        "token" => $this->renew_token,
                        "expireIn" => $this->renew_token_expiration->getTimestamp() - ((new \DateTime())->getTimestamp())
                    ),
                    "Type" => $this->token_type
                ),
                "Connection" => array(
                    "TimeStamp" => $this->connectionStamp,
                    "CookieGuid" => $this->TokenCookie,
                    "Status" => $this->status
                ),
                "Parameters" => $this->parameters,
                "DatasAppended" => $datasAppended
            )
        );

        /*return 
            json_encode(
                array(
                    "OAuth" => json_encode(get_object_vars($this)),
                    "OAuth_Tokens" => json_encode($this->extract_props($this))
                )
            );
        */
    }

    public function setState($_statusCode, $_params = _string::EmptyString, $renewTokens = _string::EmptyString)
    {
        if (($renewTokens == $this->renew_token)
            && (($this->renew_token_expiration->getTimestamp() - ((new \DateTime())->getTimestamp())) > 0)
        ) {
            $this->access_token = OAuth::GetNewToken();
            $this->renew_token = OAuth::GetNewToken();
        }

        if ($_params != _string::EmptyString) $this->parameters = $_params;

        $this->token_expiration = (new \DateTime())->modify('+' . strval(OAuth::$maxDelayTimestamp_renew) . ' seconds');
        $this->TokenCookie = $_COOKIE[AppKeys::CurrentUser];
        $this->renew_token_expiration = (new \DateTime())->modify('+' . strval(OAuth::$maxDelayTimestamp_renew) . ' hours');

        $this->status = array(
            "code" => $_statusCode,
            "text" => ($_statusCode == (int)200 ? "connected" : "disconnected")
        );
    }

    public function getTimeLeft()
    {
        return $this->token_expiration->getTimestamp() - ((new \DateTime())->getTimestamp());
    }

    public function getTimeLeft_renew()
    {
        return $this->renew_token_expiration->getTimestamp() - ((new \DateTime())->getTimestamp());
    }
}
